package com.zeitheron.hammercore.client;

import java.io.ByteArrayInputStream;
import java.lang.reflect.Field;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

import com.zeitheron.hammercore.api.lighting.ColoredLightManager;
import com.zeitheron.hammercore.event.client.ClientLoadedInEvent;
import com.zeitheron.hammercore.net.HCNet;
import com.zeitheron.hammercore.net.internal.PacketPing;
import com.zeitheron.hammercore.net.internal.PacketPlayerReady;
import com.zeitheron.hammercore.proxy.RenderProxy_Client;
import com.zeitheron.hammercore.utils.ReflectionUtil;

import net.minecraft.block.Block;
import net.minecraft.client.Minecraft;
import net.minecraft.client.resources.I18n;
import net.minecraft.client.resources.IResourcePack;
import net.minecraft.client.resources.Locale;
import net.minecraft.client.resources.data.MetadataSerializer;
import net.minecraft.util.text.translation.LanguageMap;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.fml.client.FMLClientHandler;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent.ClientTickEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent.Phase;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

@SideOnly(Side.CLIENT)
public class HammerCoreClient
{
	public static long ping;
	
	public static void runPingTest()
	{
		HCNet.INSTANCE.sendToServer(new PacketPing(System.currentTimeMillis()));
	}
	
	public static MetadataSerializer getMetadataSerializer()
	{
		return Minecraft.getMinecraft().metadataSerializer;
	}
	
	public static void emptyBlockState(Block block)
	{
		RenderProxy_Client.EMP.empty(block);
	}
	
	int pingTimer = 40;
	
	boolean renderedWorld = false;
	
	@SubscribeEvent
	public void renderWorldLast(RenderWorldLastEvent e)
	{
		if(!renderedWorld)
		{
			HCNet.INSTANCE.sendToServer(new PacketPlayerReady());
			MinecraftForge.EVENT_BUS.post(new ClientLoadedInEvent());
			renderedWorld = true;
		}
	}
	
	@SubscribeEvent
	public void clientTick(ClientTickEvent cte)
	{
		if(cte.phase != Phase.START)
			return;
		
		boolean inWorld = Minecraft.getMinecraft().world != null;
		if(renderedWorld && !inWorld)
		{
			renderedWorld = false;
			ColoredLightManager.resetTileCache();
		}
		
		if(renderedWorld && pingTimer-- <= 0)
		{
			pingTimer = 40;
			runPingTest();
		}
	}
	
	/**
	 * Call during construction to allow your mod attach builtin resources to
	 * the game.
	 * 
	 * @param pack
	 *            The resource pack to inject.
	 */
	public static void injectResourcePack(IResourcePack pack)
	{
		try
		{
			Field resourcePackList = FMLClientHandler.class.getDeclaredField("resourcePackList");
			resourcePackList.setAccessible(true);
			List<IResourcePack> rps = (List<IResourcePack>) resourcePackList.get(FMLClientHandler.instance());
			rps.add(3, pack);
		} catch(ReflectiveOperationException e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * Call during construction to allow your mod attach builtin resources to
	 * the game.
	 * 
	 * @param pack
	 *            The resource pack to inject.
	 */
	public static void injectResourcePackLast(IResourcePack pack)
	{
		try
		{
			Field resourcePackList = FMLClientHandler.class.getDeclaredField("resourcePackList");
			resourcePackList.setAccessible(true);
			List<IResourcePack> rps = (List<IResourcePack>) resourcePackList.get(FMLClientHandler.instance());
			rps.add(pack);
		} catch(ReflectiveOperationException e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * Hot-loads language localizations.
	 * 
	 * @param localizations
	 *            - The map of maps. The root map must have lower-cased language
	 *            codes pointing to inner maps with key-value localizations.
	 */
	public static void injectLanguages(Map<String, Map<String, String>> localizations)
	{
		Field i18nLocalef = I18n.class.getDeclaredFields()[0];
		i18nLocalef.setAccessible(true);
		try
		{
			Locale locale = Locale.class.cast(i18nLocalef.get(null));
			Field propertiesf = Locale.class.getDeclaredFields()[2];
			propertiesf.setAccessible(true);
			Map<String, String> properties = Map.class.cast(propertiesf.get(locale));
			String code = Minecraft.getMinecraft().gameSettings.language;
			if(localizations.containsKey("en_us"))
			{
				properties.putAll(localizations.get("en_us"));
				StringBuilder sb = new StringBuilder("# Builtin & Generated by HammerCore lang file.\n");
				localizations.get("en_us").entrySet().stream().map(ln -> "\n" + ln.getKey() + "=" + ln.getValue()).forEach(sb::append);
				LanguageMap.inject(new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8)));
			}
			if(localizations.containsKey(code))
			{
				properties.putAll(localizations.get(code));
				StringBuilder sb = new StringBuilder("# Builtin & Generated by HammerCore lang file.\n");
				localizations.get(code).entrySet().stream().map(ln -> "\n" + ln.getKey() + "=" + ln.getValue()).forEach(sb::append);
				LanguageMap.inject(new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8)));
			}
		} catch(ReflectiveOperationException err)
		{
			err.printStackTrace();
		}
	}
}