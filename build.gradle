buildscript {
    dependencies {
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.+"
    }
}

plugins {
    id 'java-library'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.neoforged.gradle.userdev' version '7.0.71'
}

apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: "com.matthewprenger.cursegradle"

ext.configFile = file("build.txt")
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse(prop)
    project.ext.hasConfig = { key ->
        return config.isSet(key);
    }
}

version = config.mod_version
group = config.maven_group

base {
    archivesName = "${config.archive_name}-${config.mc_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

runs {
    configureEach {
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'forge.enabledGameTestNamespaces', config.mod_id

        programArguments(Arrays.asList("--mixin mixins.${config.mod_id}.json --username ${config.mc_user.split(',')[0]} --uuid ${config.mc_user.split(',')[1]}".split(' ')))

        modSource project.sourceSets.main
    }

    client {
        workingDirectory project.file('run/client')
        systemProperty 'forge.enabledGameTestNamespaces', config.mod_id
    }

    server {
        workingDirectory project.file('run/server')
        systemProperty 'forge.enabledGameTestNamespaces', config.mod_id
        programArgument '--nogui'
    }
}

repositories {
    maven {
        name = "Zeitheron Maven"
        url = "https://maven.zeith.org"
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/" // location of the maven that hosts JEI files since January 2023
    }
    maven { setUrl("https://oss.sonatype.org/content/repositories/public/") }
    flatDir { dirs "libraries/${config.mc_version}/all" }
    flatDir { dirs "libraries/${config.mc_version}/classpathOnly" }
    flatDir { dirs "libraries/${config.mc_version}/runtimeOnly" }
    flatDir { dirs "libraries/embedded" }

    maven {
        url "https://maven.firstdarkdev.xyz/snapshots"
        content {
            includeGroupByRegex "com\\.lowdragmc.*"
        }
    }
    maven {
        url = "https://jitpack.io"
        content {
            includeGroupByRegex "com\\.github\\.LlamaLad7.*"
        }
    }
}

import java.nio.file.Files
import java.nio.file.StandardOpenOption

dependencies {
    implementation "net.neoforged:neoforge:${config.forge_version}"

    ////// UTILITY STUFF //////
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    ///////////////////////////

    if (hasConfig("jei_version") && !config.jei_version.isEmpty()) {
        compileOnly "mezz.jei:jei-1.20.2-common-api:${config.jei_version}"
        compileOnly "mezz.jei:jei-1.20.2-forge-api:${config.jei_version}"
        // runtimeOnly "mezz.jei:jei-${config.mc_version}-forge:${config.jei_version}"
    }

    compileOnly "com.lowdragmc.shimmer:Shimmer-forge:1.20-${config.shimmer_version}"

    def libraries = new File(file("libraries"), "${config.mc_version}")
    if (!libraries.isDirectory()) libraries.mkdirs()

    def libDir = new File(libraries, "all");
    if (libDir.isDirectory()) {
        libDir.eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            dependencies {
                implementation(project.dependencies.create("_all:$modartifact:$modversion") {
                    transitive = false
                })
            }
        }
    } else libDir.mkdir();

    libDir = new File(libraries, "classpathOnly");
    if (libDir.isDirectory()) {
        libDir.eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            dependencies {
                compileOnly(project.dependencies.create("_classpath:$modartifact:$modversion") {
                    transitive = false
                })
            }
        }
    } else libDir.mkdir();

    libDir = new File(libraries, "runtimeOnly");
    if (libDir.isDirectory()) {
        libDir.eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            dependencies {
                runtimeOnly(project.dependencies.create("_runtime:$modartifact:$modversion") {
                    transitive = false
                })
            }
        }
    } else libDir.mkdir();

    libDir = new File(file("libraries"), "embedded");
    if (libDir.isDirectory()) {
        libDir.eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            def modreference = "lib:$modartifact:$modversion"

            dependencies {
                def dep = project.dependencies.create(modreference) {
                    transitive = false
                }
                implementation dep
                shadow dep
            }
        }
    } else libDir.mkdir();
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: config.mc_version, minecraft_version_range: config.mc_range,
        forge_version    : "${config.mc_version}-${config.forge_version}", forge_version_range: config.forge_range,
        fmljava_range    : config.fmljava_range,
        mod_id           : config.mod_id, mod_name: config.mod_name, mod_license: config.mod_license, mod_version: config.mod_version,
        issue_tracker    : config.issue_tracker, modrinth_project: config.modrinth_project,
        mod_authors      : config.mod_authors, mod_description: config.mod_description
]
tasks.withType(ProcessResources).configureEach {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : config.mod_id,
                "Specification-Vendor"    : config.mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : config.mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "mixins.${config.mod_id}.json"
        ])
    }
}

task deobfJar(type: Jar) {
    archiveClassifier = 'deobf'
    from sourceSets.main.output
    manifest {
        attributes([
                "Specification-Title"     : config.mod_id,
                "Specification-Vendor"    : config.mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : config.mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "mixins.${config.mod_id}.json"
        ])
    }
}

task srcJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

artifacts {
    archives deobfJar
    archives srcJar
}

modrinth {
    token = System.env.MODRINTH_TOKEN != null ? System.env.MODRINTH_TOKEN : "NONE"
    projectId = config.modrinth_project as String
    versionNumber = config.mod_version as String
    versionType = config.release_type as String
    uploadFile = jar
    gameVersions = [config.mc_version as String]
}

curseforge {
    apiKey = System.env.CURSEFORGE_API_KEY != null ? System.env.CURSEFORGE_API_KEY : "NONE"
    project {
        id = config.cf_project as String
        changelogType = 'html'
        changelog = ""
        releaseType = config.release_type as String
        addGameVersion config.mc_version as String
        addGameVersion "NeoForge"
        mainArtifact(jar) {
            displayName = "[${config.mc_version}] ${config.mod_name} - ${config.mod_version}"
        }
    }
}

import net.neoforged.gradle.common.tasks.PotentiallySignJar;

task signJar(type: PotentiallySignJar, dependsOn: jar) {
    onlyIf {
        System.env.MC_KS_PASS != null
    }
    keyStore = System.env.MC_KS_PATH
    alias = System.env.MC_KS_ALIAS
    storePass = System.env.MC_KS_PASS
    keyPass = System.env.MC_KS_PASS
    input = jar.archiveFile
}

task placeSignedJar {
    doLast {
        def resF = signJar.output.get().asFile
        def af = jar.archiveFile.get().asFile
        af.delete()
        resF.renameTo(af)
    }
}

signJar.finalizedBy('placeSignedJar')

//def reobfFile = jar.archiveFile.get().asFile
//def reobfArtifact = artifacts.add('default', reobfFile) {
//    type 'jar'
//    builtBy 'signJar'
//}

jar.finalizedBy('signJar')
publish.dependsOn('signJar')

build.dependsOn signJar

tasks.register('buildAndUploadMod') {
    group = "upload"
    dependsOn "curseforge${config.cf_project}", 'modrinth'

    doLast {
        println "Upload complete."
    }
}

afterEvaluate {
    tasks["curseforge${config.cf_project}"].dependsOn.add(publish)
    tasks["modrinth"].dependsOn.add(publish)
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
            it.artifactId = config.archive_name + "-" + config.mc_version
            it.artifact srcJar
        }
    }
    repositories {
        maven {
            url "file:///SERVER//Maven"
        }
    }
}

// This piece of garbage will ensure that the build number is updated after build is executed.
tasks.build.doLast {
    if (!hasConfig("build_candidate") || !Boolean.parseBoolean(config.build_candidate)) {
        def buildTxt = configFile.toPath();
        List<String> lines = Files.readAllLines buildTxt;
        lines.replaceAll { String ln ->
            if (ln.startsWith("mod_version")) {
                def version = ln.split("=")[1];
                def dot = version.lastIndexOf('.') + 1;
                def newVersion = version.substring(0, dot);
                def lastOne = Integer.parseInt(version.substring(dot)) + 1;
                return "mod_version=" + newVersion + lastOne;
            }
            return ln;
        }
        Files.write buildTxt, lines, StandardOpenOption.CREATE;
    } else println "Build candidate enabled, we are not increasing build number after this."
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
