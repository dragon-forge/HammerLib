buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: 'org.spongepowered.mixin'

ext.configFile = file("build.txt")
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse(prop)
    project.ext.hasConfig = { key ->
        return config.isSet(key);
    }
}

version = config.mod_version
group = config.maven_group
archivesBaseName = "${config.archive_name}-${config.mc_version}"

mixin {
    add sourceSets.main, "mixins.${config.mod_id}.refmap.json"
    config "mixins.${config.mod_id}.json"

    debug.verbose = true
    debug.export = true
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: config.mcp_ch, version: config.mcp_vr
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.console.level', 'debug'
            setArgs(Arrays.asList("--mixin mixins.${config.mod_id}.json --username ${config.mc_user.split(',')[0]} --uuid ${config.mc_user.split(',')[1]}".split(' ')))
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.console.level', 'debug'
            setArgs(Arrays.asList("--mixin mixins.${config.mod_id}.json".split(' ')))
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "Zeitheron Maven"
        url = "https://maven.zeith.org"
    }
    maven { setUrl("https://oss.sonatype.org/content/repositories/public/") }
    flatDir { dirs 'libraries/all' }
    flatDir { dirs 'libraries/classpathOnly' }
    flatDir { dirs 'libraries/runtimeOnly' }
}

import net.minecraftforge.gradle.common.tasks.SignJar

dependencies {
    minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    implementation fg.deobf("com.lowdragmc.shimmer:Shimmer-forge:1.19.2-${config.shimmer_version}")

    def libraries = file("libraries");
    if (!libraries.isDirectory()) libraries.mkdirs()

    def libDir = new File(libraries, "all");
    if (libDir.isDirectory()) {
        libDir.eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            dependencies {
                implementation fg.deobf(project.dependencies.create("_all:$modartifact:$modversion") {
                    transitive = false
                })
            }
        }
    } else libDir.mkdir();

    libDir = new File(libraries, "classpathOnly");
    if (libDir.isDirectory()) {
        libDir.eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            dependencies {
                compileClasspath fg.deobf(project.dependencies.create("_classpath:$modartifact:$modversion") {
                    transitive = false
                })
            }
        }
    } else libDir.mkdir();

    libDir = new File(libraries, "runtimeOnly");
    if (libDir.isDirectory()) {
        libDir.eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            dependencies {
                runtimeClasspath fg.deobf(project.dependencies.create("_runtime:$modartifact:$modversion") {
                    transitive = false
                })
            }
        }
    } else libDir.mkdir();
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${config.mod_id}",
                "Specification-Vendor"    : "Zeitheron",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : "Zeitheron",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "mixins.${config.mod_id}.json"
        ])
    }
}

task deobfJar(type: Jar) {
    classifier = 'deobf'
    from sourceSets.main.output
    manifest {
        attributes(["Specification-Title"     : "${config.mod_id}",
                    "Specification-Vendor"    : "Zeitheron",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : archiveVersion,
                    "Implementation-Vendor"   : "Zeitheron",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConfigs"            : "mixins.${config.mod_id}.json"
        ])
    }
}

task srcJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives srcJar
}

curseforge {
    apiKey = System.env.CURSEFORGE_API_KEY
    project {
        id = "${config.cf_project}"
        changelogType = 'html'
        changelog = ""
        releaseType = "${config.release_type}"
        addGameVersion "${config.mc_version}"
        addGameVersion "Forge"
        mainArtifact(jar) {
            displayName = "[${config.mc_version}] ${config.mod_name} - ${config.mod_version}"
        }
    }
}

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        System.env.MC_KS_PASS != null
    }
    keyStore = System.env.MC_KS_PATH
    alias = System.env.MC_KS_ALIAS
    storePass = System.env.MC_KS_PASS
    keyPass = System.env.MC_KS_PASS
    inputFile = jar.archiveFile
    outputFile = jar.archiveFile
}

def reobfFile = jar.archiveFile.get().asFile
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'signJar'
}

jar.finalizedBy('reobfJar')
publish.dependsOn('reobfJar')

build.dependsOn signJar

afterEvaluate {
    tasks["curseforge${config.cf_project}"].dependsOn.add(publish)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = config.maven_group
            artifactId = config.archive_name + "-" + config.mc_version

            artifact reobfArtifact
            artifact srcJar
            artifact deobfJar
        }
    }
    repositories {
        maven {
            url "file:///SERVER//Maven"
        }
    }
}